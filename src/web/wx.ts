export const wxKeys = [
    'invokeWebviewMethod',
    'drawCanvas',
    'createContext',
    'createCanvasContext',
    'canvasToTempFilePath',
    'canvasGetImageData',
    'canvasPutImageData',
    'getShareInfo',
    'pageScrollTo',
    'chooseInvoiceTitle',
    'arrayBufferToBase64',
    'base64ToArrayBuffer',
    'openSetting',
    'getExtConfig',
    'chooseMedia',
    'chooseWeChatContact',
    'uploadEncryptedFileToCDN',
    'onUploadEncryptedFileToCDNProgress',
    'getExtConfigSync',
    'showShareMenu',
    'hideShareMenu',
    'updateShareMenu',
    'openUrl',
    'setNavigationBarColor',
    'setNavigationBarAlpha',
    'vibrateShort',
    'vibrateLong',
    'getSetting',
    'checkIsSupportFacialRecognition',
    'startFacialRecognitionVerify',
    'startFacialRecognitionVerifyAndUploadVideo',
    'sendBizRedPacket',
    'sendGoldenRedPacket',
    'openGoldenRedPacketDetail',
    'addPhoneContact',
    'setScreenBrightness',
    'getScreenBrightness',
    'getWeRunData',
    'canIUse',
    'setPageStyle',
    'triggerGettingWidgetData',
    'navigateToMiniProgram',
    'navigateToDevMiniProgram',
    'navigateBackMiniProgram',
    'setNavigationBarRightButton',
    'onTapNavigationBarRightButton',
    'setTopBarText',
    'setTabBarBadge',
    'removeTabBarBadge',
    'showTabBarRedDot',
    'hideTabBarRedDot',
    'showTabBar',
    'hideTabBar',
    'setTabBarStyle',
    'setTabBarItem',
    'setEnableDebug',
    'captureScreen',
    'onUserCaptureScreen',
    'setKeepScreenOn',
    'checkIsSupportSoterAuthentication',
    'startSoterAuthentication',
    'checkIsSoterEnrolledInDevice',
    'openDeliveryList',
    'reportIDKey',
    'reportKeyValue',
    'setNavigationBarTitle',
    'showNavigationBarLoading',
    'hideNavigationBarLoading',
    'startPullDownRefresh',
    'stopPullDownRefresh',
    'operateWXData',
    'getOpenDeviceId',
    'openBluetoothAdapter',
    'closeBluetoothAdapter',
    'getBluetoothAdapterState',
    'onBluetoothAdapterStateChange',
    'startBluetoothDevicesDiscovery',
    'stopBluetoothDevicesDiscovery',
    'getBluetoothDevices',
    'getConnectedBluetoothDevices',
    'createBLEConnection',
    'closeBLEConnection',
    'getBLEDeviceServices',
    'getBLEDeviceCharacteristics',
    'notifyBLECharacteristicValueChanged',
    'notifyBLECharacteristicValueChange',
    'readBLECharacteristicValue',
    'writeBLECharacteristicValue',
    'onBluetoothDeviceFound',
    'onBLEConnectionStateChanged',
    'onBLEConnectionStateChange',
    'onBLECharacteristicValueChange',
    'startBeaconDiscovery',
    'stopBeaconDiscovery',
    'getBeacons',
    'onBeaconUpdate',
    'onBeaconServiceChange',
    'startWifi',
    'stopWifi',
    'getWifiList',
    'getConnectedWifi',
    'connectWifi',
    'presetWifiList',
    'setWifiList',
    'onGetWifiList',
    'onWifiConnected',
    'onEvaluateWifi',
    'getHCEState',
    'startHCE',
    'stopHCE',
    'sendHCEMessage',
    'onHCEMessage',
    'redirectTo',
    'reLaunch',
    'navigateTo',
    'switchTab',
    'navigateBack',
    'navigateBackApplication',
    'launchApplication',
    'getStorage',
    'getStorageSync',
    'setStorage',
    'setStorageSync',
    'removeStorage',
    'removeStorageSync',
    'clearStorage',
    'clearStorageSync',
    'getStorageInfo',
    'getStorageInfoSync',
    'request',
    'connectSocket',
    'closeSocket',
    'sendSocketMessage',
    'onSocketOpen',
    'onSocketClose',
    'onSocketMessage',
    'onSocketError',
    'uploadFile',
    'downloadFile',
    'addNativeDownloadTask',
    'chooseImage',
    'previewImage',
    'getImageInfo',
    'saveImageToPhotosAlbum',
    'startRecord',
    'stopRecord',
    'playVoice',
    'pauseVoice',
    'stopVoice',
    'onVoicePlayEnd',
    'chooseVideo',
    'saveVideoToPhotosAlbum',
    'getLocation',
    'openLocation',
    'chooseLocation',
    'startLocationUpdate',
    'stopLocationUpdate',
    'onLocationChange',
    'getNetworkType',
    'onNetworkStatusChange',
    'getSystemInfo',
    'getSystemInfoSync',
    'getBatteryInfo',
    'getBatteryInfoSync',
    'startAccelerometer',
    'stopAccelerometer',
    'onAccelerometerChange',
    'startCompass',
    'stopCompass',
    'onCompassChange',
    'reportAction',
    'getBackgroundAudioManager',
    'getRecorderManager',
    'getBackgroundAudioPlayerState',
    'playBackgroundAudio',
    'pauseBackgroundAudio',
    'seekBackgroundAudio',
    'stopBackgroundAudio',
    'onBackgroundAudioPlay',
    'onBackgroundAudioPause',
    'onBackgroundAudioStop',
    'login',
    'checkSession',
    'authorize',
    'getUserInfo',
    'requestPayment',
    'verifyPaymentPassword',
    'bindPaymentCard',
    'requestPaymentToBank',
    'requestVirtualPayment',
    'openOfflinePayView',
    'openWCPayCardList',
    'requestMallPayment',
    'addCard',
    'openCard',
    'scanCode',
    'openQRCode',
    'chooseAddress',
    'saveFile',
    'openDocument',
    'getSavedFileList',
    'getSavedFileInfo',
    'getFileInfo',
    'removeSavedFile',
    'getFileSystemManager',
    'chooseContact',
    'makePhoneCall',
    'makeVoIPCall',
    'onAppRoute',
    'onAppRouteDone',
    'onAppEnterBackground',
    'onAppEnterForeground',
    'onAppUnhang',
    'onPageReload',
    'onPageNotFound',
    'createAnimation',
    'createInnerAudioContext',
    'createAudioContext',
    'createVideoContext',
    'createMapContext',
    'createCameraContext',
    'createLivePlayerContext',
    'createLivePusherContext',
    'onWebviewEvent',
    'onNativeEvent',
    'hideKeyboard',
    'getPublicLibVersion',
    'showModal',
    'showToast',
    'hideToast',
    'showLoading',
    'hideLoading',
    'showActionSheet',
    'reportAnalytics',
    'getClipboardData',
    'setClipboardData',
    'createSelectorQuery',
    'createIntersectionObserver',
    'updatePerfData',
    'traceEvent',
    'getUpdateManager',
    'createWorker',
    'voiceSplitJoint',
    'uploadSilkVoice',
    'downloadSilkVoice',
    'getResPath',
    'setResPath'
    // 'env',
    // 'appStatus',
    // 'hanged',
    // 'version'
    // 'httpRequest',
    // 'nav'
];

export const noneFunctionKeys = ['env', 'appStatus', 'hanged', 'version'];

const wx: any = {
    env: { USER_DATA_PATH: 'http://usr' },
    appStatus: 0, // or other numbers,
    hanged: false, // or true
    version: { updateTime: '2018.3.7 17:43:29', info: '', version: '1.9.93' }
};

wx.getUserInfo = function(obj) {
    // mock data
    const info = {
        encryptedData:
            '/v3zvOm1l2UWc6JvN6BjMp1K5swkTXicPnwwgZ1wwDXYVODqFQ1AayKBcgJn/qSgCBBSOfxC9xTi2XJje4VaTAgyzUHzWE/hroesk2qZfYm/PMXvHQ084Rh+Q5ya/hkLQmS/HWwl0UifJVWV7st+zKZnzHtGX5YaxnbMjjMLn64IHdHKP4oHVl26oJV71zJyzgiiL1F5BakEyk1Q2ZagLXVLKmSqNzIgy5znoNHAdbj81mmRGYwi9HmmcnjAxiVp92ahAL96pUFTrk9AMoBdQt8n4pdTN7f4cHBT/nSrJGiP+ucNOqfcS1eXnGFvjrUrNsj0+i3aO8O8xZ9TyIWlug3EKFxfmfAoOFJl6umnadEj2HFt+N5IsdGExZlfBz/xu4n7NjuXv6wB9REsvkUPnLeusn6EuJ2B2XvvpHntkGfejiV0IcT7g+LH56oQ27/8w8e5tv+hDjWL5hBRw/rreTvAN2KySOb/rqPBp8Ou8EjonE54NEhPVMgMgVir/NbikPf9AM250APyN7m67Um06AQo6FGAYl4wRPmBcQr5/U0=',
        errMsg: 'getUserInfo:ok',
        iv: 'cFSDjJu4Hf8hE2e0V9vo4A==',
        rawData: `{"nickName":"Touchumind","gender":1,"language":"zh_CN","city":"Pudong New District","province":"Shanghai","country":"China","avatarUrl":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqxkSq1lwYC9DWogC7vYBTS7FQHHy1QOCZbULlKqh4jMhI8cKaNcVFNVazZymfjw8iaWD9GOLiay7nQ/132"}`,
        signature: 'd7dac0ced9802eb45be8f9aad31b55cce41c1ce0',
        userInfo: {
            avatarUrl:
                'https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqxkSq1lwYC9DWogC7vYBTS7FQHHy1QOCZbULlKqh4jMhI8cKaNcVFNVazZymfjw8iaWD9GOLiay7nQ/132',
            city: 'Pudong New District',
            country: 'China',
            gender: 1,
            language: 'zh_CN',
            nickName: 'Touchumind',
            province: 'Shanghai'
        }
    };
    if (obj && typeof obj.success === 'function') {
        obj.success(info);
    }
};

// temp hack
wxKeys.forEach(key => {
    if (!wx[key]) {
        wx[key] = function(...args) {
            console.log(`call wx.${key} with args: ${JSON.stringify(args)}`);
            console.log(`wx.${key} has not implemented`);
        };
    }
});

export default wx;
